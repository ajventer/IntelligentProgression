// *************************** First Space Station

CONTRACT_TYPE
{
    
	name = SpaceStation
    group = SpaceStations
	
    title = Launch a Space Station
	agent = Experimental Engineering Group
	
	sortKey = 100
	
    notes = Launch your first space station into @targetBody orbit
    synopsis = Launch your first space station into @targetBody orbit
	
    description = Before we can continue to explore the far reaches of the solar system with our brave Kerbals, we need to learn more about the impact of living in space. Launch your first Space Station into orbit.
	
    completedMessage = Mission Success! The next step is to send a crew to the new station.
	
    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @CareerEvolution:Earth
    
	// REWARDS
    rewardScience = 8
    rewardReputation = 20
    rewardFunds = @CareerEvolution:Kerbucks5
	
    advanceFunds = @CareerEvolution:Kerbucks3
	
	prestige = Significant
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = MoonLanding-Crew
		title = Complete @contractType Contract
	}
	
	PARAMETER
	{
		name = SpaceStation
		type = VesselParameterGroup
		title = Put your first Space Station in Orbit
		define = SpaceStation
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Unmanned
			hideChildren = true
		}
		PARAMETER
		{
			name = HasCapacity
			type = HasCrewCapacity
			minCapacity = 2
			title = Space for at least 2 crew
			hideChildren = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModuleType = Dock
			minCount = 1
			title = Have at least 1 Docking Ports
			hideChildren = true
		}
		PARAMETER
		{
			name = SolarPanels
			type = PartValidation
			partModule = ModuleDeployableSolarPanel
			title = Have at least 2 Solar Panels
			minCount = 2
			hideChildren = true
		}
		PARAMETER
		{
			name = SSOrbit
			type = Orbit
			minInclination = 0
			title = Put your space station into a stable orbit
			hideChildren = true
		}
		PARAMETER
		{
			name = VesselIsStation
			type = VesselIsType
			vesselType = Station
			title = Set your vessel type to Station
		}
	}
}

// *************************** First Space Station Crew

CONTRACT_TYPE
{
    
	name = SSFirstCrew
    group = SpaceStations
	
    title = Launch the First Crew to your Space Station
	agent = Experimental Engineering Group
	
	sortKey = 101
	
    notes = Launch the first crew to @/targetVessel1
    synopsis = Launch the first crew to @/targetVessel1
	
    description = Now that our first space station is in orbit, we need to send our first crew to live there.
	
    completedMessage = Mission Success! Our first brave crew have started their mission on our space station. We will be watching them closely.
	
    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @CareerEvolution:Earth
    
	// REWARDS
    rewardScience = 8
    rewardReputation = 20
    rewardFunds = @CareerEvolution:Kerbucks5
	
    advanceFunds = @CareerEvolution:Kerbucks3
	
	prestige = Significant
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ALL
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.IsOrbiting() == true && v.CelestialBody().Name() == @targetBody).SelectUnique()
	}
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SpaceStation
		title = Complete @contractType Contract
	}
	
	PARAMETER
	{
		name = SSFirstCrew
		type = VesselParameterGroup
		title = Send your first crew to live on @targetVessel1
		define = SSFirstCrew
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 2
			title = Have at least 2 crewmembers on board
			hideChildren = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModuleType = Dock
			minCount = 1
			title = Have at least 1 Docking Ports
			hideChildren = true
		}
		PARAMETER
		{
			name = DockWithStation
			type = Docking
			vessel = @/targetVessel1
			title = Dock @/targetVessel1
			hideChildren = true
			disableOnStateChange = true
		}
	}
}

// *************************** Space Station Crew Rotation

CONTRACT_TYPE
{
    
	name = SSCrewRotation
    group = SpaceStations
	
    title = Rotate the Crew from the Space Station
	agent = Experimental Engineering Group
	
	sortKey = 102
	
    notes = Bring home the Kerbals from @/targetVessel1 and replace them with a new crew
    synopsis = Bring home the Kerbals from @/targetVessel1 and replace them with a new crew
	
    description = Our first crew has been up on the Space Station for a extended stay. We need to continue our research, so we want to send another crew up as well.
	
    completedMessage = Mission Success! Our first brave crew have proven that it is possible to live in space for an extended period of time. Our new crew will continue the mission that they started.
	
    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @CareerEvolution:Earth
    
	// REWARDS
    rewardScience = 8
    rewardReputation = 20
    rewardFunds = @CareerEvolution:Kerbucks5
	
    advanceFunds = @CareerEvolution:Kerbucks3
	
	prestige = Significant
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ALL
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.IsOrbiting() == true && v.CelestialBody().Name() == @targetBody).SelectUnique()
	}
	
	DATA
    {
        type = List<Kerbal>
        targetKerbals = @targetVessel1.Crew()
		hidden = true
    }
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SSFirstCrew
		cooldownDuration = 15d
		title = Complete @contractType Contract and wait 15 days
	}
	
	PARAMETER
	{
		name = SSCrewRotationReturn
		type = VesselParameterGroup
		title = Bring your first crew home from @/targetVessel1
		define = SSFirstCrewReturn
		
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/targetKerbals
		}
	}
	
	PARAMETER
	{
		name = SSCrewRotation
		type = VesselParameterGroup
		title = Bring the new crew to @/targetVessel1
		define = SSCrewRotation
		
		completeInSequence = true
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 2
			title = Have at least 2 crewmembers on board
			hideChildren = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModuleType = Dock
			minCount = 1
			title = Have at least 1 Docking Port
			hideChildren = true
		}
		PARAMETER
		{
			name = DockWithStation
			type = Docking
			vessel = @/targetVessel1
			title = Dock @/targetVessel1
			hideChildren = true
			disableOnStateChange = true
		}
	}
}

// *************************** Space Station Deorbit

CONTRACT_TYPE
{
    
	name = SSDeorbit
    group = SpaceStations
	
    title = Deorbit Space Station
	agent = Experimental Engineering Group
	
	sortKey = 103
	
    notes = @/targetVessel1 has reached the end of its life, return the crew and deorbit the station.
    synopsis = @/targetVessel1 has reached the end of its life, return the crew and deorbit the station.
	
    description = Our first space station was a great success and brought us new information about living in space. Alas, all good things must come to an end and it is time to safely deorbit the space station. Return the crew home and deorbit the station, destroying it in the process.
	
    completedMessage = Mission Success! You will always remember your first Space Station, just like your first love. But, as is true for both, neither was as good looking as you remember.
	
    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @CareerEvolution:Earth
    
	// REWARDS
    rewardScience = 2
    rewardReputation = 10
    rewardFunds = @CareerEvolution:Kerbucks2
	
    advanceFunds = @CareerEvolution:Kerbucks2
	
	prestige = Significant
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ALL
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.IsOrbiting() == true && v.CelestialBody().Name() == @targetBody).SelectUnique()
	}
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SSCrewRotation
		cooldownDuration = 30d
		title = Complete @contractType Contract and wait 30 days
	}
	
	DATA
    {
        type = List<Kerbal>
        targetKerbals = @targetVessel1.Crew()
		hidden = true
    }
	
	PARAMETER
	{
		name = SSCrewReturn
		type = VesselParameterGroup
		title = Bring your crew home from @/targetVessel1
		define = SSCrewReturn
		
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/targetKerbals
		}
	}
	
	PARAMETER
	{
		name = DeorbitSpaceStation
		type = VesselDestroyed
		title = Deorbit and Destroy your Space Station
		completeInSequence = true
	}
}

// *************************** Modular Space Station Core

CONTRACT_TYPE
{
    
	name = ModularSS
    group = SpaceStations
	
    title = Modular Space Station Core
	agent = Experimental Engineering Group
	
	sortKey = 104
	
    notes = Launch the first part of the new Modular Space Station
    synopsis = Launch the first part of the new Modular Space Station
	
    description = After the knowledge gained from our first Space Station, our engineers have come up with a new style of Space Station. They want us to build it in space! This will become the largest spaceship ever built if we are successful.
	
    completedMessage = Mission Success! The core of the Modular Space Station is now in orbit. Our engineers are busy building the next component to attach!
	
    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @CareerEvolution:Earth
    
	// REWARDS
    rewardScience = 2
    rewardReputation = 5
    rewardFunds = @CareerEvolution:Kerbucks2
	
    advanceFunds = @CareerEvolution:Kerbucks5
	
	prestige = Significant
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SSDeorbit
		title = Complete @contractType Contract
	}
	
	DATA
	{
		type = double
		doubleAtmo = @targetBody.AtmosphereAltitude() * 2.5
		doubleAtmoKM = Round(@/doubleAtmo / 1000)
		title = Double the Atmosphere
	}
	
	PARAMETER
	{
		name = ModularSS
		type = VesselParameterGroup
		title = Launch the Modular Space Station Core
		define = ModularSS
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}		
		PARAMETER 
		{
			name = ProbeControl
			type = PartValidation
			category = Control
			minCount = 1
			title = Have at least 1 Probe Core
			hideChildren = true
		}		
		PARAMETER
		{
			name = HasBatteryCapacity
			type = HasResourceCapcity
			resource = ElectricCharge
			minQuantity = 5000.0
			title = Have capacity for at least 5000 Electric Charge
			hideChildren = true
		}		
		PARAMETER
		{
			name = SolarPanels
			type = PartValidation
			partModule = ModuleDeployableSolarPanel
			title = Have at least 2 Deployable Solar Panels
			minCount = 2
			hideChildren = true
		}
		PARAMETER
		{
			name = HasMonoProp
			type = HasResourceCapcity
			resource = MonoPropellant
			minQuantity = 2000.0
			title = Have capacity for at least 2000 MonoPropellant Fuel (don't forget to include some RCS thrusters to make sure you can move the station)
			hideChildren = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModuleType = Dock
			minCount = 1
			title = Have at least 1 Docking Port (to connect your next module to)
			hideChildren = true
		}
		PARAMETER
		{
			name = MSSOrbit
			type = Orbit
			minPeA = @/doubleAtmo
			title = Orbit with a minimum Periapsis of @/doubleAtmoKM km
			hideChildren = true
		}
		PARAMETER
		{
			name = VesselIsStation
			type = VesselIsType
			vesselType = Station
			title = Set your vessel type to Station
		}
	}
}

// *************************** Modular Space Station Addon

CONTRACT_TYPE
{
    
	name = MSSAddon
    group = SpaceStations
	
    title = Modular Space Station Add-on
	agent = Experimental Engineering Group
	
	sortKey = 105
	
    notes = Add a new Module to @/targetVessel1
    synopsis = Add a new Module to @/targetVessel1
	
    description = You have successfully put the core of your Modular Space Station into orbit, but it is not very functional right now. We need you to bring the next module (or modules) up to connect to the station. You can choose to use as many launches as you want to complete the contract.
	
    completedMessage = Mission Success! Your space station now has all of the modules needed to support a crew! It is time to send them up!
	
    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @CareerEvolution:Earth
    
	// REWARDS
    rewardScience = 2
    rewardReputation = 5
    rewardFunds = @CareerEvolution:Kerbucks2
	
    advanceFunds = @CareerEvolution:Kerbucks5
	
	prestige = Significant
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = ModularSS
		title = Complete @contractType Contract
	}
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ALL
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.IsOrbiting() == true && v.CelestialBody().Name() == @targetBody).SelectUnique()
	}
	
	PARAMETER
	{
		name = MSSAddon
		type = VesselParameterGroup
		title = Add an additional Module to @/targetVessel1
		define = MSSAddon
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModuleType = Dock
			minCount = 6
			title = Have at least 6 Docking Ports
			hideChildren = true
		}
		PARAMETER
		{
			name = HasCapacity
			type = HasCrewCapacity
			minCapacity = 2
			title = Space for at least 2 crew
			hideChildren = true
		}
		PARAMETER
		{
			name = DockWithStation
			type = Docking
			vessel = @/targetVessel1
			title = Dock @/targetVessel1
			hideChildren = true
			disableOnStateChange = true
		}
	}
}

// *************************** Modular Space Station First Crew

CONTRACT_TYPE
{
    
	name = MSSFirstCrew
    group = SpaceStations
	
    title = Modular Space Station First Crew
	agent = Experimental Engineering Group
	
	sortKey = 106
	
    notes = Send the first crew to @/targetVessel1
    synopsis = Send the first crew to @/targetVessel1
	
    description = We still want you to add to @/targetVessel1, but it is time for you to send up the first crew to live on the Space Station.
	
    completedMessage = Congratulations! The first crew of @/targetVessel1 is successfully living on the station!
	
    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @CareerEvolution:Earth
    
	// REWARDS
    rewardScience = 2
    rewardReputation = 5
    rewardFunds = @CareerEvolution:Kerbucks2
	
    advanceFunds = @CareerEvolution:Kerbucks5
	
	prestige = Significant
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = MSSAddon
		title = Complete @contractType Contract
	}
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ALL
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.IsOrbiting() == true && v.CelestialBody().Name() == @targetBody).SelectUnique()
	}
	DATA
	{
		type = Double
		requiredValue = true
		hidden = true
		targetCrewCapacity = @/targetVessel1.CrewCapacity()
	}
	
	PARAMETER
	{
		name = MSSFirstCrew
		type = VesselParameterGroup
		title = Send the first crew to @/targetVessel1
		define = MSSFirstCrew
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = @/targetCrewCapacity
			maxCrew = @/targetCrewCapacity
			title = Have a crew of @/targetCrewCapacity
			hideChildren = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModuleType = Dock
			minCount = 1
			title = Have at least 1 Docking Port
			hideChildren = true
		}
		
		PARAMETER
		{
			name = DockWithStation
			type = Docking
			vessel = @/targetVessel1
			title = Dock @/targetVessel1
			hideChildren = true
			disableOnStateChange = true
		}
	}
}

// *************************** Modular Space Station Science Addon

CONTRACT_TYPE
{
    
	name = MSSscienceAddon
    group = SpaceStations
	
    title = Modular Space Station Science Add-on
	agent = Experimental Engineering Group
	
	sortKey = 105
	
    notes = Add a new Science Module to @/targetVessel1
    synopsis = Add a new Science Module to @/targetVessel1
	
    description = The first crew is living on @/targetVessel1 and now we want to increase the amount of science experiments we are running on board. Send up a science lab module to become a permanent part of the station.
	
    completedMessage = Mission Success! Your space station crew can now run different experiments in the science lab!
	
    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @CareerEvolution:Earth
    
	// REWARDS
    rewardScience = 2
    rewardReputation = 5
    rewardFunds = @CareerEvolution:Kerbucks2
	
    advanceFunds = @CareerEvolution:Kerbucks5
	
	prestige = Significant
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = MSSFirstCrew
		title = Complete @contractType Contract
	}
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ALL
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.IsOrbiting() == true && v.CelestialBody().Name() == @targetBody).SelectUnique()
	}
	
	PARAMETER
	{
		name = MSSScienceAddon
		type = VesselParameterGroup
		title = Add Science Module to @/targetVessel1
		define = MSSScienceAddon
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModuleType = Dock
			minCount = 1
			title = Have at least 1 Docking Port
			hideChildren = true
		}
		PARAMETER:NEEDS[!StationScience]
        {
            name = ScienceLab
            type = PartValidation
            title = Have a Science Lab on board

            hideChildren = true
            // The name of the part to check for. Optional.
            partModule = ModuleScienceLab
        }
        PARAMETER:NEEDS[StationScience]
        {
            name = StationScienceSupport
            type = Any
            title = Have any type of Science Lab on board

            PARAMETER
            {
                name = PartValidation
                type = PartValidation
                title = 1 or more standard science labs
                hideChildren = true

                // The name of the part to check for. Optional.
                partModule = ModuleScienceLab
            }

            PARAMETER
            {
                name = PartValidation
                type = PartValidation
                title = 1 or more research facilities
                hideChildren = true

                // The name of the part to check for. Optional.
                partModule = StationScienceModule
                title = Station Science Lab
            }
        }
		PARAMETER
		{
			name = DockWithStation
			type = Docking
			vessel = @/targetVessel1
			title = Dock @/targetVessel1
			hideChildren = true
			disableOnStateChange = true
		}
	}
}

// *************************** One Year in Space

CONTRACT_TYPE
{
    
	name = OneYearInSpace
    group = SpaceStations
	
    title = Live for One Year in Space
	agent = Experimental Engineering Group
	
	sortKey = 108
	
    notes = Have 2 crew live for one year in space on @/targetVessel1
    synopsis = Have 2 crew live for one year in space on @/targetVessel1
	
    description = Management wants us to start exploring other planets with something a little more intelligent than robots. Before we can move on to these exciting new places, we need to prove we can live in space for an extended period of time.
	
    completedMessage = Mission Success! Our brave crew lived in space for more than a year! The rest of the Solar System is now opened up for us to explore!
	
    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @CareerEvolution:Earth
    
	// REWARDS
    rewardScience = 8
    rewardReputation = 20
    rewardFunds = @CareerEvolution:Kerbucks5
	
    advanceFunds = @CareerEvolution:Kerbucks3
	
	prestige = Significant
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ALL
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.IsOrbiting() == true && v.CelestialBody().Name() == @targetBody).SelectUnique()
	}
	
	DATA
    {
        type = List<Kerbal>
        targetKerbals = @targetVessel1.Crew()
		hidden = true
    }
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = MSSFirstCrew
		cooldownDuration = 30d
		title = Complete @contractType Contract and wait 30 days
	}
	
	PARAMETER
	{
		name = OneYearInSpace
		type = VesselParameterGroup
		title = Bring the new crew to @/targetVessel1 to live for 1 year
		define = OneYearInSpace
		
		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER 
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 2
			title = Have 2 crewmembers on board
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockingPort
			type = PartValidation
			partModuleType = Dock
			minCount = 1
			title = Have at least 1 Docking Port
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = DockWithStation
			type = Docking
			vessel = @/targetVessel1
			title = Dock @/targetVessel1
			hideChildren = true
			disableOnStateChange = true
		}
		PARAMETER
		{
			name = Duration
			type = Duration
			duration = 365d
			preWaitText = Transfer to the station in the specified orbit.
			waitingText = Orbiting for 365 days
			completionText = Stay completed, you may return home now.
			disableOnStateChange = true
		}
	}
	
	PARAMETER
	{
		name = MSSCrewRotationReturn
		type = VesselParameterGroup
		title = Bring your first crew home from @/targetVessel1
		define = MSSFirstCrewReturn
		
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/targetKerbals
		}
	}
}

// *************************** Bring Crew Home

CONTRACT_TYPE
{
    
	name = OneYearReturn
    group = SpaceStations
	
    title = Bring Your Crew Home from @/targetVessel1
	agent = Experimental Engineering Group
	
	sortKey = 109
	
    notes = Bring Your Crew Home from @/targetVessel1
    synopsis = Bring Your Crew Home from @/targetVessel1
	
    description = Our crew on @/targetVessel1 has come to the end of their mission. It is time to bring them home.
	
    completedMessage = Mission Success! Everyone returned home safely!
	
    minExpiry = 0
    maxExpiry = 0
    maxCompletions = 1
	
    cancellable = true
    declinable = true
	
    targetBody = @CareerEvolution:Earth
    
	// REWARDS
    rewardScience = 1
    rewardReputation = 2
    rewardFunds = @CareerEvolution:Kerbucks3
	
    advanceFunds = @CareerEvolution:Kerbucks3
	
	prestige = Trivial
	
	DATA
	{
		type = Vessel
		requiredValue = true
		hidden = true
		uniquenessCheck = GROUP_ALL
		targetVessel1 = AllVessels().Where(v => v.VesselType() == Station && v.IsOrbiting() == true && v.CelestialBody().Name() == @targetBody).SelectUnique()
	}
	
	DATA
    {
        type = List<Kerbal>
        targetKerbals = @targetVessel1.Crew()
		hidden = true
    }
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = OneYearInSpace
		title = Complete @contractType Contract
	}
	
	PARAMETER
	{
		name = BringCrewHome
		type = VesselParameterGroup
		title = Bring your crew home from @/targetVessel1
		define = BringCrewHome
		
		PARAMETER
		{
			name = RecoverKerbal
			type = RecoverKerbal
			kerbal = @/targetKerbals
		}
	}
}